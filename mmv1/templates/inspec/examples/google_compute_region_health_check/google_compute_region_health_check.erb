<% gcp_project_id = "#{external_attribute(pwd, 'gcp_project_id', doc_generation)}" -%>
<% health_check_name = "#{external_attribute(pwd, 'gcp_compute_health_check_name', doc_generation)}" -%>
<% health_region = "#{external_attribute(pwd, 'gcp_compute_health_check_region_name', doc_generation)}" -%>

describe google_compute_region_health_check(project: <%= gcp_project_id -%>, region: <%= health_region -%>, name: <%= health_check_name -%>) do
  it { should exist }
  its('type') { should eq "TCP" }
end

describe google_compute_region_health_check(project: <%= gcp_project_id -%>,  region: 'europe-west2', name: 'notthere') do
  it { should_not exist }
end

<% if doc_generation -%>
```
  ### Test that a GCP compute region exists
```
  describe google_compute_region_health_check(project: 'chef-inspec-gcp',  region: 'europe-west2', name: 'test1') do
    it { should exist }
  end
```
  ### Test that a GCP compute region is in the expected state
```
  describe google_compute_region_health_check(project: 'chef-inspec-gcp',  region: 'europe-west2', name: 'test1') do
    its('status') { should eq 'UP' }
  end
```
  ### Test a GCP compute region identifier
```
  describe google_compute_region_health_check(project: 'chef-inspec-gcp',  region: "asia-east1", name: 'test1') do
    its('unhealthy_threshold') { should eq 2 }
  end
```
  ### Check that a region is associated with the expected zone fully qualified name
```
  describe google_compute_region_health_check(project: 'chef-inspec-gcp',  region: "asia-east1", name: 'test1') do
    its('healthy_threshold') { should eq 2 }
  end
```
  ### Check that a region is associated with the expected zone short name
```
  describe google_compute_region_health_check(project: 'chef-inspec-gcp',  region: "asia-east1", name: 'test1') do
    its('types') { should include "TCP" }
  end
```
<% end -%>